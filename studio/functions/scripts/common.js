const { execSync, spawnSync } = require("child_process")
const { cpSync, writeFileSync, existsSync, lstatSync, unlinkSync, rmSync, linkSync } = require("fs")
const { resolve } = require("path")

const resolveExisting = p => {
  const abs = resolve(p)
  if (!existsSync(abs)) throw Error(abs + " does not exist")
  return abs
}

const demoProjectId = "demo-studio"

const paths = {
  serverSource: resolveExisting("./.next/server"),
  serverDest: resolve("./functions/server"),
  dependencies: resolveExisting("./package.json"),
  packageBase: resolveExisting("./functions/package.base.json"),
  packageFull: resolve("./functions/package.json"),
  emulate: resolveExisting("./functions/scripts/emulate.js")
}

/**
 * The functions deploy process uploads whatever's in the functions folder, and
 * the cloud environment is configured by the package.json file. Normal usage is
 * to maintain separate dependencies and package.json from other parts of the
 * code. Since I'm using next.js for the build, everything uses the main
 * package.json for dependencies.
 *
 * So this function mixes the main package.json and build outputs into the
 * functions-specific package.json.
 */
function generatePackageJson() {
  const { dependencies, devDependencies } = require(paths.dependencies)
  const { "//": _, ...base } = require(paths.packageBase)
  const full = { "//": "Autogenerated, do not edit", ...base, dependencies, devDependencies }
  writeFileSync(paths.packageFull, JSON.stringify(full, null, 2))
}

function removeBuildOutput() {
  const outPath = paths.serverDest
  if (existsSync(outPath)) {
    const out = lstatSync(outPath)
    if (out.isSymbolicLink()) {
      unlinkSync(outPath)
    } else {
      rmSync(outPath, { recursive: true })
    }
  }
}

function copyBuildOutput() {
  cpSync(paths.serverSource, paths.serverDest, { recursive: true, force: true })
}

function linkBuildOutput() {
  // linkSync requires admin priveleges so use ln directly
  spawnSync("ln", ["-s", paths.serverSource, paths.serverDest], { stdio: "inherit" })
}

module.exports = {
  resolveExisting,
  paths,
  generatePackageJson,
  copyBuildOutput,
  linkBuildOutput,
  removeBuildOutput,
  demoProjectId
}
